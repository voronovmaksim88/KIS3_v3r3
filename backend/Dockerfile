# Используем официальный образ Python в качестве базового.
# Выберите версию Python, которую вы используете в проекте (например, 3.11, 3.12).
# Slim-версия меньше по размеру.
FROM python:3.11-slim

# Устанавливаем переменную окружения, чтобы вывод Python не буферизировался
ENV PYTHONUNBUFFERED=1

# Устанавливаем рабочую директорию в контейнере
WORKDIR /app

# Обновляем pip (опционально, но хорошая практика перед установкой других пакетов)
# и устанавливаем uv
RUN pip install --upgrade pip && \
    pip install uv

# Копируем файл зависимостей *перед* копированием остального кода
# Это позволяет Docker кэшировать слой с установленными зависимостями,
# если сам файл requirements.txt не изменился.
# Убедитесь, что у вас есть файл requirements.txt в корне проекта.
# Если вы используете pyproject.toml для зависимостей, скопируйте его
# и измените команду RUN ниже на `uv pip install --system .`
COPY requirements.txt .

# Устанавливаем зависимости с помощью uv
# --system: Устанавливает пакеты в системный Python (внутри контейнера)
# --no-cache: Не сохраняет кэш загрузок/сборки внутри образа, чтобы уменьшить размер
RUN uv pip install --no-cache --system -r requirements.txt

# Копируем остальные файлы проекта в рабочую директорию /app
COPY . .

# Сообщаем Docker, что контейнер будет слушать порт 8000 во время выполнения
EXPOSE 8000

# Указываем команду для запуска приложения при старте контейнера
# Используем python -m uvicorn для надежности
# --host 0.0.0.0 делает приложение доступным извне контейнера
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
